import math


"""
План кода


   1. Формула для расчета вероятности
  


  Формула рассчитывает вероятность утверждений
  claimk - утвержденное игроком количество кубиков
  claimval - утвержденное игроком значение кубиков
  knowndice - наши кубики (известны)
  totaldice - общее количество чужих-неизвестных кубиков
  maputo - статус мапуто. Изначально мы его объявляем False, потому что так в большинстве случаев
  """
def formula(claimk, claimval, knowndice, totaldice, maputo=False): # считаем сколько у нас уже есть нужных значений среди наших кубиков (включая джокеры - единицы)
  sovpav = knowndice.count(claimval) # считает количество названных игроком значений среди наших кубиков
  if not maputo and claimval != 1:
      sovpav += knowndice.count(1) # добавляем к посчитанному единицы-джокеры (если не мапуто)
  ostatok = claimk - sovpav # остаток - сколько нужно кубиков с таким значением среди не наших (см. для обоснования файл с формулами, стр. 3 под графиком)
  if ostatok <= 0:
      return 1.0 # если среди наших уже набралось достаточно, то вероятность 100%
  res = 0.0 # базовая вероятность, к которой мы уже плюсуем - иначе получается кривой return. лучше объявить это до цикла
  n = totaldice
  # считаем вероятность по формуле (см. файл с формулами)
  for i in range(ostatok, n + 1): # нам же подходит не только заявленное количество, но и большее - см. файл
      combs = math.comb(n, i)# встроенная функция из библиотеки math про сочетания, работает на версиях 3.8 и выше!
      if maputo:
          # формула для статуса мапуто (без джокеров-единиц)
          itog = combs * (5 ** (n - i)) / (6 ** n)
      else:
          # базовая формула (с джокерами-единицами)
          itog = combs * (4 ** (n - i)) * (2 ** i) / (6 ** n)
      res += itog
  return res
"""
   2. Создание классов
"""
class Player:
"""
Функции про игрока:
   3. Присвоение статусов игроку в начале игры
"""
class Player:
   def __init__(self, name: str):
       self.name = name
       self.dice = 5  # У каждого игрока в начале 5 кубиков
       self.hand = []  # Значения кубиков игрока
       self.status = "нейтральный"  # Статус: нейтральный/мапуто/проигравший
"""
   4. Обновление статуса игрока
"""
def update_status(self):
       """Обновляем статус игрока в зависимости от количества кубиков"""
       if self.dice == 0:
           self.status = "проигравший"
       elif self.dice == 1:
           self.status = "мапуто"
       else:
           self.status = "нейтральный"
"""
   5. Введение результата броска игрока
"""
class Perudo: 
"""
Функции про раунды:
   6. Определение роли игрока в раунде
   7. Определение количества активных игроков
   8. Установление очередности игроков
   9. Проверка наличия нашего игрока в игровом процессе
   10. Начало нового раунда (+ мб вывод текущего положения)
   11. Если (9) выполняется, то просит наши кости через (5)
   12. Ввод итогов раунда - победа/проигрыш и обновление статуса через (4) + общего кол-ва кубиков
   13. Проверка на победу во всей игре и возвращение итога, при победе
   14. Общая функция процесса игры, в которую мы кладем все предыдущее


   15. Начало игры
"""

